
import numpy as np
import math
from scipy import interpolate

class YieldCurve(object):
    
    def __init__(self, maturities=[], prices=[], coupons=[]):
        self.__maturities__=maturities
        self.__YTMs__=[]
        self.__prices__=[]
        self.__coupons__=[]
        self.__spot_rates__=dict()
        self.__forward_rates__ = dict()
        if len(coupons)==0:
            self.__YTMs__=prices
        else:
            self.__prices__=prices
            self.__coupons__=coupons
    
    def get_original_mats(self):
        return [t for t in self.__maturities__]
    
    def get_maturities(self):
        if len(self.__spot_rates__.keys())==0:
            self.__bootstrap_spot_curve__()
        return [t for t in sorted(self.__spot_rates__.keys())]
        
    def get_forward_rates(self):
        if len(self.__forward_rates__)>0:
            return [self.__forward_rates__[t] for t in sorted(self.__forward_rates__.keys())]
        else:
            self.__strip_forward_curve__()
            return [self.__forward_rates__[t] for t in sorted(self.__forward_rates__.keys())]
    
    def get_spot_rates(self):
        if len(self.__spot_rates__)>0:
            return [self.__spot_rates__[t] for t in sorted(self.__spot_rates__.keys())]
        else:
            self.__bootstrap_spot_curve__()
            return [self.__spot_rates__[t] for t in sorted(self.__spot_rates__.keys())]
        
    def __strip_forward_curve__(self):
        if len(self.__spot_rates__)==0:
            self.__bootstrap_spot_curve__()
        
        spots=self.get_spot_rates()
        mats=self.get_maturities()
        fwds=[]
        for i in range(0, len(spots)-2):
            rt=(((1+spots[i+2]) **mats[i+2])/((1+spots[i])**mats[i]))-1
            fwds.append(rt)
        for i in range(2, len(mats)):
            self.__forward_rates__[mats[i]] = fwds[i-2]
        
    def __bootstrap_spot_curve__(self):
        if len(self.__YTMs__)>0:
            self.__bootstrap_par__()
        else:
            pass
            #self.__bootstrap_coupon__()
    
    def __bootstrap_par__(self):
        ##Insert a zero at beginning of maturities and yields
        if self.__maturities__[0]!=0:
            self.__maturities__.insert(0,0)
            self.__YTMs__.insert(0,0)
        
        ##Interpolate to six month increments
        interp_function=interpolate.interp1d(self.__maturities__, self.__YTMs__)
        mats = [x/2. for x in range(0, max(self.__maturities__)*2+1)]
        YTM2 = interp_function(mats)
        
        ##Set prices and cashflow matrix
        self.__prices__ = np.ones(len(mats))*100
        self.CFs = np.identity(len(YTM2))*100
        
        for i in range(0, len(YTM2)):
            for j in range(0, i+1):
                self.CFs[i,j] += YTM2[i]/2
        
        inv_CF=np.linalg.inv(self.CFs)
        DFs=np.dot(inv_CF, self.__prices__)

        spots= []
        for i in range(0, len(DFs)):
            if mats[i]==0:
                spots.append(-1*math.log(DFs[i]))
            else:
                spots.append(-1*math.log(DFs[i])/mats[i])
        
        for i in range(0, len(mats)):
            self.__spot_rates__[mats[i]] = spots[i]
        
'''
YC1= YieldCurve([0, 5, 7, 10, 20, 30], [0,-.28, -.11, .11, .54, .72])
YC1.get_spot_rates()
YC1.get_original_mats()
YC1.get_maturities()
YC1.get_forward_rates()

import matplotlib.pyplot as plt
plt.plot(YC1.get_maturities()[2:], YC1.get_forward_rates())
plt.plot(YC1.get_maturities(), YC1.get_spot_rates())
'''


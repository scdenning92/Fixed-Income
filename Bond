import datetime
from dateutil import relativedelta
from scipy import interpolate
import numpy as np

class Bond(object):
    """ Bond object. 
    Takes either issue datetime, 
                 maturity datetime (must be after issue) and 
                 coupon (assumes semiannual coupon)
        or takes dict of cashflows: keys are datetimes
    Want to include:
        -Pricing mechanism (when passed a yield curve object)
        -duration calculator (when passed a yield curve object)"""
    
    def __init__(self, coupon, par=0, issue="", maturity=""):
        self.__par__=par
        self.__coupon__=dict()
        if type(issue)==datetime.datetime:
            self.__issue_date__ = issue
            if issue < maturity:
                self.__maturity_date__ = maturity
            else:
                print "Issue date must be before maturity."
            ##Generate dict of cashflows for the bond
            dt=maturity
            while dt > issue:
                self.__coupon__[dt]= coupon
                dt-=relativedelta.relativedelta(months =+ 6)
            self.__coupon__[self.__maturity_date__]+=self.__par__
        else:
            self.__coupon__ = coupon
    
    def get_coupon_dates(self):
        return self.__coupon__.keys()
    
    def __price_and_duration__(self, date, YCurve):
        """ Given a yield curve on a date, find price of the bond:
            Yield Curve must be appropriate to match bond (corp-corp, govt-govt)
            Make sure yield curve is as of the date, otherwise not valid price"""
        ##Make list with the cashflows, the time to the cashflows, 
        ##and a list which will contain the discounted value of the cashflows
        time_to_cashflows = [((x.year-date.year)*12+x.month-date.month)/12. for x in self.__coupon__.keys()]
        cashflows = [self.__coupon__[T] for T in self.__coupon__.iterkeys()]
        ##Remove cashflows that have already happened
        removeindex=[]
        for i in range(0, len(time_to_cashflows)):
            if(time_to_cashflows[i] < 0):
                removeindex.append(i)
        removeindex.sort(reverse=True)
        for idx in removeindex:
            r1=time_to_cashflows.pop(idx)
            r1=cashflows.pop(idx)
        
        ##Interpolate yields
        spt=interpolate.interp1d(YCurve.get_maturities(), YCurve.get_spot_rates(), fill_value="extrapolate", kind="nearest")
        spts=-1*spt(time_to_cashflows)
        PVs=[1 for t in cashflows]
        dur=[1 for t in cashflows]
        
        prc_mat=np.matrix([time_to_cashflows, cashflows, spts, PVs, dur])
        ##Calculate present values of cashflows
        prc_mat[3,:]=np.multiply(prc_mat[1,:],np.exp(np.multiply(prc_mat[2,:],prc_mat[0,:])))
        ##calculate individual durations:
        prc_mat[4,:]=np.multiply(prc_mat[3,:], prc_mat[0,:])
        
        bondprice=np.sum(prc_mat[3,:])
        duration=(1./bondprice)*np.sum(prc_mat[4,:])
        return bondprice, duration
        
    def get_price(self, date, YCurve):
        """ Given a yield curve on a date, find price of the bond:
            Yield Curve must be appropriate to match bond (corp-corp, govt-govt)
            Make sure yield curve is as of the date, otherwise not valid price"""
        (price, duration)=self.__price_and_duration__(date, YCurve)
        return price

    def get_duration(self, date, YCurve):
        """ Given a yield curve on a date, find duration of the bond (this method largely the same as price):
            Yield Curve must be appropriate to match bond (corp-corp, govt-govt)
            Make sure yield curve is as of the date given, otherwise not valid duration"""
        (price, duration) = self.__price_and_duration__(date, YCurve)
        return duration

class Annuity(Bond):
    """
    Extension of Bond object. Pays constant cashflows
    """
    def __init__(self, start, num_payments, freq='M'):
        """
        start is datetime for when first payment is made
        num_payments is an integer value for number of payments
        freq is the frequency of payments. Default to M for monthly or A for annual
        """
        self.__par__=0
        self.__coupon__=dict()
        ##Set payment frequency
        if freq=='M':
            increment = 1
            cpn=1./12
        elif freq=='A':
            increment=12
            cpn=1
        else:
            raise ValueError("Frequency must be 'M' for monthly payments or 'A' for annual")
        
        dateref=start
        counter=0
        while counter<num_payments:
            self.__coupon__[dateref]=cpn
            counter+=1
            dateref+=relativedelta.relativedelta(months=+increment)
